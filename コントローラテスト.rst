コントローラのテスト
===========================

　ASP.NET MVCアプリのコントローラは小さく、UIに関する機能に限定されているべきである。UI以外も扱うような肥大化したコントローラは、テストやメンテナンスが困難になる。

セクション
* なぜコントローラをテストするか
* 単体テスト
* 統合テスト


なぜコントローラをテストするか
--------------------------------------------

　コントローラはASP.NET MVCアプリの中心となる。あなたが設計したとおりにふるまうという確証があるべきである。自動化されたテストは確証となり、また、製品化前のエラー発見を促す。不必要な機能はコントローラには持たせず、テストではコントローラで行うべきものをテストすることが大事である。

　コントローラロジックはミニマルで、ビジネスロジックやインフラに関すること（データアクセスなど）は入れない。コントローラロジックのテストは、フレームワークのテストではない。正しいアクセス、不正なアクセスに対するふるまいをテストすべきである。ビジネスオペレーションに対してどうふるまうかという、コントローラの役割をテストすべきである。

　典型的なコントローラの役割として

* ModelState.IsValidの確認
* ModelStateは不正ならエラーを返す
* 一貫性からビジネスエンティティを取り出す
* ビズネスエンティティ上での役割を果たす
* ビジネスエンティティを一貫性へ保存する
* 適切なIActionResultを返す。


ユニットテスト
------------------------------

　単体テストはアプリのインフラや依存とは別の部分のテストである。コントローラを単体テストする場合、個別のアクションの内容だけをテストし、依存やフレームワークのふるまいはテストしない。コントローラの単体テストでは'フィルタ<http://`_、`ルーティング<http://>`_、`モデルバインディング<http://>`_などの扱いを避ける。ただひとつのことにフォーカスし、シンプルに書き、素早く実行する。良い書き方のユニットテストはオーバーヘッドが多くなく、頻繁に実行できる。ユニットテストは統合テストで行うようなコンポーネントの結合の問題を検知しない。

　もしカスタムフィルタやルートなどを書いたときは、コントローラのテストとは別で単体テストを行うべきである。そして分離の下でテストを行うべきである。

Tip
　テストを作って走らせるにはVisual Studioがいい。

　単体テストをやるため、下記のコントローラを見てみる。ブレーンストーミングセッションのリストを表示し、POSTで新しいブレーンストーミングセッションを追加できるものである。

.. code-block:: cs

    using System;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using TestingControllersSample.Core.Interfaces;
    using TestingControllersSample.Core.Model;
    using TestingControllersSample.ViewModels;

    namespace TestingControllersSample.Controllers
    {
        public class HomeController : Controller
        {
            private readonly IBrainstormSessionRepository _sessionRepository;

            public HomeController(IBrainstormSessionRepository sessionRepository)
            {
                _sessionRepository = sessionRepository;
            }

            public async Task<IActionResult> Index()
            {
                var sessionList = await _sessionRepository.ListAsync();

                var model = sessionList.Select(session => new StormSessionViewModel()
                {
                    Id = session.Id,
                    DateCreated = session.DateCreated,
                    Name = session.Name,
                    IdeaCount = session.Ideas.Count
                });

                return View(model);
            }

            public class NewSessionModel
            {
                [Required]
                public string SessionName { get; set; }
            }

            [HttpPost]
            public async Task<IActionResult> Index(NewSessionModel model)
            {
                if (!ModelState.IsValid)
                {
                    return BadRequest(ModelState);
                }

                await _sessionRepository.AddAsync(new BrainstormSession()
                {
                    DateCreated = DateTimeOffset.Now,
                    Name = model.SessionName
                });

                return RedirectToAction("Index");
            }
        }
    }

コントローラは下記の明示的な依存関係の原則があり、IBrainstormSessionRepositorのインスタンスの依存性注入の役割を持つ。これは<a href="#" target="_blank">Mow</a>のようなモックオブジェクトフレームワークを使った単体テストを容易にする。HTTP GET Indexメソッドはループも分岐もなく一つのメソッドを呼ぶ。このIndexメソッドのテストでは、ViewResultがListメソッドのViewModelによって返ってくることを確認する必要がある。

.. code-block:: cs

    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Moq;
    using TestingControllersSample.Controllers;
    using TestingControllersSample.Core.Interfaces;
    using TestingControllersSample.Core.Model;
    using TestingControllersSample.ViewModels;
    using Xunit;

    namespace TestingControllersSample.Tests.UnitTests
    {
        public class HomeControllerTests
        {
            [Fact]
            public async Task Index_ReturnsAViewResult_WithAListOfBrainstormSessions()
            {
                // Arrange
                var mockRepo = new Mock<IBrainstormSessionRepository>();
                mockRepo.Setup(repo => repo.ListAsync()).Returns(Task.FromResult(GetTestSessions()));
                var controller = new HomeController(mockRepo.Object);

                // Act
                var result = await controller.Index();

                // Assert
                var viewResult = Assert.IsType<ViewResult>(result);
                var model = Assert.IsAssignableFrom<IEnumerable<StormSessionViewModel>>(
                    viewResult.ViewData.Model);
                Assert.Equal(2, model.Count());
            }

            [Fact]
            public async Task IndexPost_ReturnsBadRequestResult_WhenModelStateIsInvalid()
            {
                // Arrange
                var mockRepo = new Mock<IBrainstormSessionRepository>();
                mockRepo.Setup(repo => repo.ListAsync()).Returns(Task.FromResult(GetTestSessions()));
                var controller = new HomeController(mockRepo.Object);
                controller.ModelState.AddModelError("SessionName", "Required");
                var newSession = new HomeController.NewSessionModel();

                // Act
                var result = await controller.Index(newSession);

                // Assert
                var badRequestResult = Assert.IsType<BadRequestObjectResult>(result);
                Assert.IsType<SerializableError>(badRequestResult.Value);
            }

            [Fact]
            public async Task IndexPost_ReturnsARedirectAndAddsSession_WhenModelStateIsValid()
            {
                // Arrange
                var mockRepo = new Mock<IBrainstormSessionRepository>();
                mockRepo.Setup(repo => repo.AddAsync(It.IsAny<BrainstormSession>()))
                    .Returns(Task.CompletedTask)
                    .Verifiable();
                var controller = new HomeController(mockRepo.Object);
                var newSession = new HomeController.NewSessionModel()
                {
                    SessionName = "Test Name"
                };

                // Act
                var result = await controller.Index(newSession);

                // Assert
                var redirectToActionResult = Assert.IsType<RedirectToActionResult>(result);
                Assert.Null(redirectToActionResult.ControllerName);
                Assert.Equal("Index", redirectToActionResult.ActionName);
                mockRepo.Verify();
            }

            private List<BrainstormSession> GetTestSessions()
            {
                var sessions = new List<BrainstormSession>();
                sessions.Add(new BrainstormSession()
                {
                    DateCreated = new DateTime(2016, 7, 2),
                    Id = 1,
                    Name = "Test One"
                });
                sessions.Add(new BrainstormSession()
                {
                    DateCreated = new DateTime(2016, 7, 1),
                    Id = 2,
                    Name = "Test Two"
                });
                return sessions;
            }
        }
    }

　HTTP POST Indexメソッドで確認すべきは、
* アクションメソッドが、ModelState.IsValidがfalseの状態で適切なデータのViewResultを返すこと
* ModelStata.IsValidがtrueのとき、Addメソッドが呼ばれ、RedirectToActionResultが正しい引数とともに返される。

.. code-block:: cs

        var viewResult = Assert.IsType<ViewResult>(result);
        var model = Assert.IsAssignableFrom<IEnumerable<StormSessionViewModel>>(
            viewResult.ViewData.Model);
        Assert.Equal(2, model.Count());
    }

    [Fact]
    public async Task IndexPost_ReturnsBadRequestResult_WhenModelStateIsInvalid()
    {
        // Arrange
        var mockRepo = new Mock<IBrainstormSessionRepository>();
        mockRepo.Setup(repo => repo.ListAsync()).Returns(Task.FromResult(GetTestSessions()));
        var controller = new HomeController(mockRepo.Object);
        controller.ModelState.AddModelError("SessionName", "Required");
        var newSession = new HomeController.NewSessionModel();

        // Act
        var result = await controller.Index(newSession);

        // Assert
        var badRequestResult = Assert.IsType<BadRequestObjectResult>(result);
        Assert.IsType<SerializableError>(badRequestResult.Value);
    }

    [Fact]
    public async Task IndexPost_ReturnsARedirectAndAddsSession_WhenModelStateIsValid()
    {
        // Arrange
        var mockRepo = new Mock<IBrainstormSessionRepository>();

　最初のテストで確認するのは、ModelStateが不正の時、GETリクエストが来た場合と同じViewResultを返すことである。このテストでは不正なモデルがテストをパスできないようにする。モデルバインディングが行われなければそれらは動かないだろう、だからメソッドを直接呼ぶ。ここでモデルバインディングをテストしようとはしていない。ただアクションメソッドのすることをテストしている。最もシンプルなアプローチはModelStateにエラーを加えることだ。

　二つ目のテストではModelStateが正しい値の場合を扱う。BrainStormingSessionが新たに追加され、メソッドはRedirectToAcrionResultを適切な値で返す。モック化されたものは通常無視され、呼ばれないものである。しかしVerifiableをセットアップの最初で行えばテストで呼んで確認できる。これはmockRepo.Verifyを呼ぶことで行われる。

Note
　？？？。詳しくはMoqによるモックのふるまいのカスタマイズにて。

　アプリのほかのコントローラはブレーンストーミングセッションの適切な情報を表示する。これは不正なidを扱う多少のロジックを含む。

.. code-block:: cs

    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using TestingControllersSample.Core.Interfaces;
    using TestingControllersSample.ViewModels;

    namespace TestingControllersSample.Controllers
    {
        public class SessionController : Controller
        {
            private readonly IBrainstormSessionRepository _sessionRepository;

            public SessionController(IBrainstormSessionRepository sessionRepository)
            {
                _sessionRepository = sessionRepository;
            }

            public async Task<IActionResult> Index(int? id)
            {
                if (!id.HasValue)
                {
                    return RedirectToAction("Index", "Home");
                }

                var session = await _sessionRepository.GetByIdAsync(id.Value);
                if (session == null)
                {
                    return Content("Session not found.");
                }

                var viewModel = new StormSessionViewModel()
                {
                    DateCreated = session.DateCreated,
                    Name = session.Name,
                    Id = session.Id
                };

                return View(viewModel);
            }
        }
    }

　このコントローラアクションは、returnステートメントそれぞれによって、テストすべき三つのケースがある。

.. code-block:: cs

    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Moq;
    using TestingControllersSample.Controllers;
    using TestingControllersSample.Core.Interfaces;
    using TestingControllersSample.Core.Model;
    using TestingControllersSample.ViewModels;
    using Xunit;

    namespace TestingControllersSample.Tests.UnitTests
    {
        public class SessionControllerTests
        {
            [Fact]
            public async Task IndexReturnsARedirectToIndexHomeWhenIdIsNull()
            {
                // Arrange
                var controller = new SessionController(sessionRepository: null);

                // Act
                var result = await controller.Index(id: null);

                // Arrange
                var redirectToActionResult = Assert.IsType<RedirectToActionResult>(result);
                Assert.Equal("Home", redirectToActionResult.ControllerName);
                Assert.Equal("Index", redirectToActionResult.ActionName);
            }

            [Fact]
            public async Task IndexReturnsContentWithSessionNotFoundWhenSessionNotFound()
            {
                // Arrange
                int testSessionId = 1;
                var mockRepo = new Mock<IBrainstormSessionRepository>();
                mockRepo.Setup(repo => repo.GetByIdAsync(testSessionId))
                    .Returns(Task.FromResult((BrainstormSession)null));
                var controller = new SessionController(mockRepo.Object);

                // Act
                var result = await controller.Index(testSessionId);

                // Assert
                var contentResult = Assert.IsType<ContentResult>(result);
                Assert.Equal("Session not found.", contentResult.Content);
            }

            [Fact]
            public async Task IndexReturnsViewResultWithStormSessionViewModel()
            {
                // Arrange
                int testSessionId = 1;
                var mockRepo = new Mock<IBrainstormSessionRepository>();
                mockRepo.Setup(repo => repo.GetByIdAsync(testSessionId))
                    .Returns(Task.FromResult(GetTestSessions().FirstOrDefault(s => s.Id == testSessionId)));
                var controller = new SessionController(mockRepo.Object);

                // Act
                var result = await controller.Index(testSessionId);

                // Assert
                var viewResult = Assert.IsType<ViewResult>(result);
                var model = Assert.IsType<StormSessionViewModel>(viewResult.ViewData.Model);
                Assert.Equal("Test One", model.Name);
                Assert.Equal(2, model.DateCreated.Day);
                Assert.Equal(testSessionId, model.Id);
            }

            private List<BrainstormSession> GetTestSessions()
            {
                var sessions = new List<BrainstormSession>();
                sessions.Add(new BrainstormSession()
                {
                    DateCreated = new DateTime(2016, 7, 2),
                    Id = 1,
                    Name = "Test One"
                });
                sessions.Add(new BrainstormSession()
                {
                    DateCreated = new DateTime(2016, 7, 1),
                    Id = 2,
                    Name = "Test Two"
                });
                return sessions;
            }
        }
    }

　このアプリはWeb APIとしての機能を持つ（アイデアのリストがブレーンストーミングセッションやセッションに新しいアイデアを入れるメソッドと結び付けられる）。

.. code-block:: cs

    using System;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using TestingControllersSample.ClientModels;
    using TestingControllersSample.Core.Interfaces;
    using TestingControllersSample.Core.Model;

    namespace TestingControllersSample.Api
    {
        [Route("api/ideas")]
        public class IdeasController : Controller
        {
            private readonly IBrainstormSessionRepository _sessionRepository;

            public IdeasController(IBrainstormSessionRepository sessionRepository)
            {
                _sessionRepository = sessionRepository;
            }

            [Route("forsession/{sessionId}")]
            [HttpGet]
            public async Task<IActionResult> ForSession(int sessionId)
            {
                var session = await _sessionRepository.GetByIdAsync(sessionId);
                if (session == null)
                {
                    return NotFound(sessionId);
                }

                var result = session.Ideas.Select(idea => new IdeaDTO()
                {
                    Id = idea.Id,
                    Name = idea.Name,
                    Description = idea.Description,
                    DateCreated = idea.DateCreated
                }).ToList();

                return Ok(result);
            }

            [Route("create")]
            [HttpPost]
            public async Task<IActionResult> Create([FromBody]NewIdeaModel model)
            {
                if (!ModelState.IsValid)
                {
                    return BadRequest(ModelState);
                }

                var session = await _sessionRepository.GetByIdAsync(model.SessionId);
                if (session == null)
                {
                    return NotFound(model.SessionId);
                }

                var idea = new Idea()
                {
                    DateCreated = DateTimeOffset.Now,
                    Description = model.Description,
                    Name = model.Name
                };
                session.AddIdea(idea);

                await _sessionRepository.UpdateAsync(session);

                return Ok(session);
            }
        }
    }

　ForSessionメソッドはIdeaDTO型のデータのリストを、JavaScriptの慣習に従ったキャメルケースのプロパティネームとして返す。ビジネスドメインのエンティティをAPI呼び出しから直接返されるのを避けるため？？？。ドメインエンティティとその型でのマッピングはつながりを超えて手動で行う必要がある（LINQのSelectをここで示すように使う）か、AutoMapperのようなライブラリを使う。

　CreateとForSessionの単体テストは下記のように。

.. code-block:: cs

    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Moq;
    using TestingControllersSample.Api;
    using TestingControllersSample.ClientModels;
    using TestingControllersSample.Core.Interfaces;
    using TestingControllersSample.Core.Model;
    using Xunit;

    namespace TestingControllersSample.Tests.UnitTests
    {
        public class ApiIdeasControllerTests
        {
            [Fact]
            public async Task Create_ReturnsBadRequest_GivenInvalidModel()
            {
                // Arrange &amp; Act
                var mockRepo = new Mock<IBrainstormSessionRepository>();
                var controller = new IdeasController(mockRepo.Object);
                controller.ModelState.AddModelError("error","some error");

                // Act
                var result = await controller.Create(model: null);

                // Assert
                Assert.IsType<BadRequestObjectResult>(result);
            }

            [Fact]
            public async Task Create_ReturnsHttpNotFound_ForInvalidSession()
            {
                // Arrange
                int testSessionId = 123;
                var mockRepo = new Mock<IBrainstormSessionRepository>();
                mockRepo.Setup(repo => repo.GetByIdAsync(testSessionId))
                    .Returns(Task.FromResult((BrainstormSession)null));
                var controller = new IdeasController(mockRepo.Object);

                // Act
                var result = await controller.Create(new NewIdeaModel());

                // Assert
                Assert.IsType<NotFoundObjectResult>(result);
            }

            [Fact]
            public async Task Create_ReturnsNewlyCreatedIdeaForSession()
            {
                // Arrange
                int testSessionId = 123;
                string testName = "test name";
                string testDescription = "test description";
                var testSession = GetTestSession();
                var mockRepo = new Mock<IBrainstormSessionRepository>();
                mockRepo.Setup(repo => repo.GetByIdAsync(testSessionId))
                    .Returns(Task.FromResult(testSession));
                var controller = new IdeasController(mockRepo.Object);

                var newIdea = new NewIdeaModel()
                {
                    Description = testDescription,
                    Name = testName,
                    SessionId = testSessionId
                };
                mockRepo.Setup(repo => repo.UpdateAsync(testSession))
                    .Returns(Task.CompletedTask)
                    .Verifiable();

                // Act
                var result = await controller.Create(newIdea);

                // Assert
                var okResult = Assert.IsType<OkObjectResult>(result);
                var returnSession = Assert.IsType<BrainstormSession>(okResult.Value);
                mockRepo.Verify();
                Assert.Equal(2, returnSession.Ideas.Count());
                Assert.Equal(testName, returnSession.Ideas.LastOrDefault().Name);
                Assert.Equal(testDescription, returnSession.Ideas.LastOrDefault().Description);
            }

            [Fact]
            public async Task ForSession_ReturnsHttpNotFound_ForInvalidSession()
            {
                // Arrange
                int testSessionId = 123;
                var mockRepo = new Mock<IBrainstormSessionRepository>();
                mockRepo.Setup(repo => repo.GetByIdAsync(testSessionId))
                    .Returns(Task.FromResult((BrainstormSession)null));
                var controller = new IdeasController(mockRepo.Object);

                // Act
                var result = await controller.ForSession(testSessionId);

                // Assert
                var notFoundObjectResult = Assert.IsType<NotFoundObjectResult>(result);
                Assert.Equal(testSessionId, notFoundObjectResult.Value);
            }

            [Fact]
            public async Task ForSession_ReturnsIdeasForSession()
            {
                // Arrange
                int testSessionId = 123;
                var mockRepo = new Mock<IBrainstormSessionRepository>();
                mockRepo.Setup(repo => repo.GetByIdAsync(testSessionId)).Returns(Task.FromResult(GetTestSession()));
                var controller = new IdeasController(mockRepo.Object);

                // Act
                var result = await controller.ForSession(testSessionId);

                // Assert
                var okResult = Assert.IsType<OkObjectResult>(result);
                var returnValue = Assert.IsType<List<IdeaDTO>>(okResult.Value);
                var idea = returnValue.FirstOrDefault();
                Assert.Equal("One", idea.Name);
            }

            private BrainstormSession GetTestSession()
            {
                var session = new BrainstormSession()
                {
                    DateCreated = new DateTime(2016, 7, 2),
                    Id = 1,
                    Name = "Test One"
                };

                var idea = new Idea() { Name = "One" };
                session.AddIdea(idea);
                return session;
            }
        }
    }

　先に触れたように、ModeleStateが不正である場合のふるまいのテストは、モデルエラーを追加することで行う。単体テストでモデルバインディングやモデルバリデーションのテストをしようとしてはしけない。ただアクションメソッドがModelStateの値によって適切にふるまうことをテストする。

　二つ目のテストはリポジトリがnullを返す場合のケースで、モックリポジトリがnullを返すように設定する。テストDBを作る必要はない。先に示したように一行で書けるクエリで結果が返ってくるようにすればいい。

　最後のテストではUpdateメソッドが呼ばれることをテストする。先に行ったように、モックはVerifiableとともに呼ばれ、モック化されたリポジトリのメソッドは、検証できるメソッドが呼ばれたかを確かめるために呼ばれる。Updateメソッドがデータを保存するのは単体テストで試すことではない。統合テストで試すことである。

統合テスト
--------------------------

　統合テストでは個別のモジュールがアプリで協調動作するかを試す。一般に、単体テストできることは統合テストでもできる。しかし逆はできない。それでも統合テストは単体テストより重い。したがっもっともよいテストは？？？。

　モックオブジェクトを使うのは統合テストではめずらしいかもしれない、それでも有用である。単体テストではモックオブジェクトはテスト項目単体の外のデータを用意するのに効果的だった。統合テストでは、本当にそれらが全体で協調動作するのかを試す。


アプリケーションの状態
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

　一つの重要な考えごとは、どうやってアプリをテストできる状態に持っていくかである。テストではそれぞれの項目が独立しており、それぞれが想定の状態で行われるべきである。もしアプリがDBやデータ保存機構を持たない場合、これは大したことではない。しかし現実にはアプリはデータストアを持っており、データストアの都度のリセットなしではテストのたびにほかのテストへ影響がある。とてもシンプルなASP.NET Coreアプリのテストをする手段として、組み込みのTestServerを使うが、そこで使うデータを移す必要はない。もし本物のDBを使いたければ、アプリをテストDBへつなぎ、それぞれのテスト実行時に設定したデフォルト状態へリセットできるようにするという手段がある。

　テストプロジェクトから本番用のデータベースは接続できない。だからこのサンプルプロジェクトでは、StartupクラスのInitializeDatabaseメソッドで、Development環境ならEntity Framework Coreのインメモリデータベースを使うようにした。この統合テストは自動でDevelopment環境を構築できるようにした。もうデータベースのリセットの心配はない。インメモリのデータベースがアプリの再起動の際にそれを自動で行ってくれる。

　startupクラス:

.. code-block:: cs

    using System;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Builder;
    using Microsoft.AspNetCore.Hosting;
    using Microsoft.EntityFrameworkCore;
    using Microsoft.Extensions.DependencyInjection;
    using Microsoft.Extensions.Logging;
    using TestingControllersSample.Core.Interfaces;
    using TestingControllersSample.Core.Model;
    using TestingControllersSample.Infrastructure;

    namespace TestingControllersSample
    {
        public class Startup
        {
            public void ConfigureServices(IServiceCollection services)
            {
                services.AddDbContext<AppDbContext>(
                    optionsBuilder => optionsBuilder.UseInMemoryDatabase());

                services.AddMvc();

                services.AddScoped<IBrainstormSessionRepository,
                    EFStormSessionRepository>();
            }

            public void Configure(IApplicationBuilder app,
                IHostingEnvironment env,
                ILoggerFactory loggerFactory)
            {
                loggerFactory.AddConsole(LogLevel.Warning);

                if (env.IsDevelopment())
                {
                    app.UseDeveloperExceptionPage();

                    var repository = app.ApplicationServices.GetService<IBrainstormSessionRepository>();
                    InitializeDatabaseAsync(repository).Wait();
                }

                app.UseStaticFiles();

                app.UseMvcWithDefaultRoute();
            }

            public async Task InitializeDatabaseAsync(IBrainstormSessionRepository repo)
            {
                var sessionList = await repo.ListAsync();
                if (!sessionList.Any())
                {
                    await repo.AddAsync(GetTestSession());
                }
            }

            public static BrainstormSession GetTestSession()
            {
                var session = new BrainstormSession()
                {
                    Name = "Test Session 1",
                    DateCreated = new DateTime(2016, 8, 1)
                };
                var idea = new Idea()
                {
                    DateCreated = new DateTime(2016, 8, 1),
                    Description = "Totally awesome idea",
                    Name = "Awesome idea"
                };
                session.AddIdea(idea);
                return session;
            }
        }
    }

　GetTestSessionメソッドが以下の統合テストで頻繁に使われるだろう。


Viewへのアクセス
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

　それぞれの統合テストクラスはTestServerというASP.NET Coreアプリを動かすものを設定する。デフォルトではTestServerはアプリのフォルダをホストする。今回のケースでプロジェクトフォルダである。したがって、ViewResultを返すコントローラアクションをテストしようとすると、下記のエラーを見るだろう。

.. code-block::

    The view 'Index' was not found. The following locations were searched:
    (list of locations)

　この問題に対処するには、サーバがApplicationBasePathとApplicationNameを使うように設定する必要がある。これは統合テストのクラスにあるUserServicesを呼ぶことで行われる。

.. code-block:: cs

    using System;
    using System.Collections.Generic;
    using System.Net;
    using System.Net.Http;
    using System.Threading.Tasks;
    using Xunit;

    namespace TestingControllersSample.Tests.IntegrationTests
    {
        public class HomeControllerTests : IClassFixture<TestFixture<TestingControllersSample.Startup>>
        {
            private readonly HttpClient _client;

            public HomeControllerTests(TestFixture<TestingControllersSample.Startup> fixture)
            {
                _client = fixture.Client;
            }

            [Fact]
            public async Task ReturnsInitialListOfBrainstormSessions()
            {
                // Arrange
                var testSession = Startup.GetTestSession();

                // Act
                var response = await _client.GetAsync("/");

                // Assert
                response.EnsureSuccessStatusCode();
                var responseString = await response.Content.ReadAsStringAsync();
                Assert.True(responseString.Contains(testSession.Name));
            }

            [Fact]
            public async Task PostAddsNewBrainstormSession()
            {
                // Arrange
                string testSessionName = Guid.NewGuid().ToString();
                var data = new Dictionary<string, string>();
                data.Add("SessionName", testSessionName);
                var content = new FormUrlEncodedContent(data);

                // Act
                var response = await _client.PostAsync("/", content);

                // Assert
                Assert.Equal(HttpStatusCode.Redirect, response.StatusCode);
                Assert.Equal("/", response.Headers.Location.ToString());
            }
        }
    }

　このケースではresponseStringはViewからレンダリングされたHTMLを得、これが予見した結果を含んでいるかを確認できる。

APIメソッド
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

　もしアプリがWeb API機能として使われるものなら、自動テストがそれらを期待通りに行ったか確かめる良い手段がある。組み込みのTestServerはWeb APIのテストを容易にする。もしアプリのAPIメソッドがモデルバインディングを使っているなら、ModeｌState.IsValidを常にチェックすべきである。そしてそして統合テストがモデル検証を適切に正しい場所で行っているかをテストする。

　下記のテストセットはIdeasControllerにあるCreateメソッドをターゲットにしている。

.. code-block:: cs

    [Fact]
    public async Task CreatePostReturnsBadRequestForMissingNameValue()
    {
        // Arrange
        var newIdea = new NewIdeaDto("", "Description", 1);

        // Act
        var response = await _client.PostAsJsonAsync("/api/ideas/create", newIdea);

        // Assert
        Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);
    }

    [Fact]
    public async Task CreatePostReturnsBadRequestForMissingDescriptionValue()
    {
        // Arrange
        var newIdea = new NewIdeaDto("Name", "", 1);

        // Act
        var response = await _client.PostAsJsonAsync("/api/ideas/create", newIdea);

        // Assert
        Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);
    }

    [Fact]
    public async Task CreatePostReturnsBadRequestForSessionIdValueTooSmall()
    {
        // Arrange
        var newIdea = new NewIdeaDto("Name", "Description", 0);

        // Act
        var response = await _client.PostAsJsonAsync("/api/ideas/create", newIdea);

        // Assert
        Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);
    }

    [Fact]
    public async Task CreatePostReturnsBadRequestForSessionIdValueTooLarge()
    {
        // Arrange
        var newIdea = new NewIdeaDto("Name", "Description", 1000001);

        // Act
        var response = await _client.PostAsJsonAsync("/api/ideas/create", newIdea);

        // Assert
        Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);
    }

    [Fact]
    public async Task CreatePostReturnsNotFoundForInvalidSession()
    {
        // Arrange
        var newIdea = new NewIdeaDto("Name", "Description", 123);

        // Act
        var response = await _client.PostAsJsonAsync("/api/ideas/create", newIdea);

        // Assert
        Assert.Equal(HttpStatusCode.NotFound, response.StatusCode);
    }

    [Fact]
    public async Task CreatePostReturnsCreatedIdeaWithCorrectInputs()
    {
        // Arrange
        var testIdeaName = Guid.NewGuid().ToString();
        var newIdea = new NewIdeaDto(testIdeaName, "Description", 1);

        // Act
        var response = await _client.PostAsJsonAsync("/api/ideas/create", newIdea);

        // Assert
        response.EnsureSuccessStatusCode();
        var returnedSession = await response.Content.ReadAsJsonAsync<BrainstormSession>();
        Assert.Equal(2, returnedSession.Ideas.Count);
        Assert.True(returnedSession.Ideas.Any(i => i.Name == testIdeaName));
    }

    [Fact]
    public async Task ForSessionReturnsNotFoundForBadSessionId()
    {
        // Arrange &amp; Act
        var response = await _client.GetAsync("/api/ideas/forsession/500");


        // Assert
        Assert.Equal(HttpStatusCode.NotFound, response.StatusCode);
    }

    [Fact]
    public async Task ForSessionReturnsIdeasForValidSessionId()
    {
        // Arrange
        var testSession = Startup.GetTestSession();

        // Act
        var response = await _client.GetAsync("/api/ideas/forsession/1");

        // Assert
        response.EnsureSuccessStatusCode();
        var ideaList = JsonConvert.DeserializeObject<List<IdeaDTO>>(
            await response.Content.ReadAsStringAsync());
        var firstIdea = ideaList.First();

　先に見せたように、HTML Viewを返すアクションの統合テストとは違い、Web APIメソッドはデシリアライズ可能な強い型付けのオブジェクトを返す。このケースではテストはBrainStormingセッションのインスタンスをデシリアライズし、アイデアがコレクションに正しく追加されているかを確かめる。

　さらなる統合テストのサンプルはこのサンプルプロジェクトで見られる。
