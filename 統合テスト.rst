:version: 1.0.0-rc1

統合テスト
===================


統合テストはアプリケーションの機能群の正しい協調動作を促す。ASP.NET Coreはユニットテストフレームワークと組み込みのwebホストを使い、リクエストをオーバーヘッドなしでできるテストをサポートしている。

.. contents:: Sections:
  :local:
  :depth: 1

`View or download sample code <https://github.com/aspnet/docs/tree/master/aspnet/testing/integration-testing/sample>`__

統合テストについて
-----------------------------------

統合テストはアプリケーションの個々のパーツが、協調して正しく動くかを確認できる。ユニットテストと違い、アプリケーションの構成、すなわちデータベース、ファイルシステム、ネットワークリソース、ウェブリクエスト、レスポンスなどを含むようになっている。ユニットテストは偽、あるいはモックのオブジェクトを配置する。一方で統合テストの目的はシステム全体で正しく動作するかを確認するものである。 

統合テストは多大なコードを動作させたり、それがインフラ要素にのっかっているために、ユニットテストと比べてだいぶ時間がかかる。したがって統合テストを行う個数を決めておくのはいいことで、とくに同様のテストがユニットテストにあるならなおさらである。 

.. tip:: もしある動作がユニットテストでも統合テストでも行えるなら、ユニットテストのほうが高速でいい。いくつものユニットテストを異なる入力条件で行うかもしれない。もしくはわずかな統合テストで重要なシナリオをカバーしておくだろう。 

メソッドのロジックをテストするのは通常、ユニットテストでやるべきことである。アプリケーションがフレームワーク、あるいはデータベースと組み合わせてどう作用するかをテストする。可能な限りのデータベースへの読み書きを行うようなことはない。すべてのデータの並び順などを試す必要はなくて、アプリケーションが適切に動くという自分への証拠となればいい。 

ASP.NET Coreでの統合テスト 
--------------------------------

統合テストのセットアップを始めるにあたって、まずテストプロジェクトを作り、テストランナーをインストールする。これはユニットテストのところで書いた。 

.. tip:: テストプロジェクトはユニットテストと統合テストで分けよう。これはインフラでの問題がユニットテストに波及するのを防げるし、テストの個別実行などが楽になる。 

テストホスト
^^^^^^^^^^^^^

ASP.NET Core includes a test host that can be added to integration test projects and used to host ASP.NET Core applications, serving test requests without the need for a real web host. The provided sample includes an integration test project which has been configured to use `xUnit`_ and the Test Host, as you can see from this excerpt from its *project.json* file:

.. literalinclude:: integration-testing/sample/test/PrimeWeb.IntegrationTests/project.json
  :language: javascript
  :lines: 9-14
  :dedent: 2
  :emphasize-lines: 5

Microsoft.AspNetCore.TestHostパッケージでは、テストサーバーを作成、設定できる。以下に示すテストでは、ルートが"Hello World!"と返すものをどのようにテストするかを確認する。 

.. literalinclude:: integration-testing/sample/test/PrimeWeb.IntegrationTests/PrimeWebDefaultRequestShould.cs
  :language: c#
  :lines: 11-33
  :dedent: 8
  :emphasize-lines: 6-7

これらのテストはArrange-Act-Assertパターンを使っているが、Arrangeステップはコンストラクタで行われている。WebHostBuilderはTestHostを作るために使われ、Configureメソッドをパスさせている。このメソッドはTestServerパイプラインを設定するのに使われる。 

テストのActではリクエストがTestServerのルートパスへ発行され、文字列が返される。この文字列が期待される文字列"Hello World!"と比較される。もし一致するならテストをパスし、そうでなければ失敗である。 

さらに機能をテストするための統合テストを追加していく。

.. literalinclude:: integration-testing/sample/test/PrimeWeb.IntegrationTests/PrimeWebCheckPrimeShould.cs
  :language: c#
  :lines: 9-66
  :dedent: 4
  :emphasize-lines: 8-9

ここで注意だが、この記事では本当の素数チェックは行っていない。それでもアプリケーションは私たちの期待どおりに動いている。私たちはすでにPrimeServiceのユニットテストカバレッジでを出してあるからそうなっている。 

.. image:: integration-testing/_static/test-explorer.png

.. note:: You can learn more about the unit tests in the `Unit testing`_ article.

ここまで来て、複数の成功したテストがある。ここがアプリケーションのデザインが良いものかを判断する良いタイミングだろう。もしアレなコードがあるようなら、リファクタリングすべきタイミングだろう。 

ミドルウェアを使ったリファクタリング
-----------------------------

リファクタリングはコードの動作を変えずに、コードのデザインを変えて質を上げることである。それはシステムに影響がないことを確かめるため、一連のテストととも行い、テストすべてをパスすべきである。下記が素数チェックの実装である。 

.. code-block:: c#
  :emphasize-lines: 11-31

    public void Configure(IApplicationBuilder app,
        IHostingEnvironment env)
    {
        if (env.IsDevelopment())
        {
            app.UseDeveloperExceptionPage();
        }

        app.Run(async (context) =>
        {
            if (context.Request.Path.Value.Contains("checkprime"))
            {
                int numberToCheck;
                try
                {
                    numberToCheck = int.Parse(context.Request.QueryString.Value.Replace("?",""));
                    var primeService = new PrimeService();
                    if (primeService.IsPrime(numberToCheck))
                    {
                        await context.Response.WriteAsync(numberToCheck + " is prime!");
                    }
                    else
                    {
                        await context.Response.WriteAsync(numberToCheck + " is NOT prime!");
                    }
                }
                catch
                {
                    await context.Response.WriteAsync("Pass in a number to check in the form /checkprime?5");
                }
            }
            else
            {
                await context.Response.WriteAsync("Hello World!");
            }
        });
    }

このコードは動くが、機能として実装したいものには遠い。Configureメソッドが、URLエンドポイントを使いするたびに肥大化していく様を想像してみてほしい。  

ASP.NET Coreのミドルウェアの長所が使える。それによって素数チェックロジックのカプセル化を行うことができる。

ASP.NET Coreのミドルウェアの長所が使える。それによって素数チェックロジックのカプセル化を行うことができる。

パスをミドルウェアがパラメータとして使えるようにしたい。ミドルウェアクラスはRequestDelegateとPrimeCheckerOptionsのインスタンスがコンストラクタに含まれるだろう。もしミドルウェアでの設定とリクエストによるパスが一致しなければ、別のミドルウェアを呼んで、なければさらにというチェインにする。あとの実装コードはConfigure内のInvokeメソッドである。 

.. note:: Since our middleware depends on the ``PrimeService`` service, we are also requesting an instance of this service via the constructor. The framework will provide this service via :doc:`/fundamentals/dependency-injection`, assuming it has been configured (e.g. in ``ConfigureServices``).

.. literalinclude:: integration-testing/sample/src/PrimeWeb/Middleware/PrimeCheckerMiddleware.cs
  :language: none
  :emphasize-lines: 39-63

.. note:: Since this middleware acts as an endpoint in the request delegate chain when its path matches, there is no call to ``_next.Invoke`` in the case where this middleware handles the request.

このミドルウェアはそれ自身の設定を楽にするため下記のようにメソッドを加えてある

.. literalinclude:: integration-testing/sample/src/PrimeWeb/Startup.cs
  :language: c#
  :lines: 19-33
  :dedent: 8
  :emphasize-lines: 9

このリファクタリングにおいて、アプリケーションはこれまでと同様に動く。それは統合テストすべてにパスすることで保障されている。

.. tip:: リファクタリングが済みテストにパスしたタイミング、それはソースコントロールへコミットするタイミングとしてはちょうどいい。もしTDDサイクルを試しているなら、。 `Red-Green-Refactorサイクルを適用することを考えてもいいかもしれない <http://ardalis.com/rgrc-is-the-new-red-green-refactor-for-test-first-development>`_.

まとめ
-------

統合テストはユニットテストより高いレベルでのアプリケーション動作の確認である。構成や個々のパーツの協調動作を試すものである。ASP.NET Coreはテストがしやすいように作られており、TestServerはエンドポイントのテストをとても簡単にしてくれる。

Additional Resources
--------------------

- `Unit testing`_
- :doc:`/fundamentals/middleware`

.. _Unit testing: https://docs.microsoft.com/en-us/dotnet/articles/core/testing/unit-testing-with-dotnet-test